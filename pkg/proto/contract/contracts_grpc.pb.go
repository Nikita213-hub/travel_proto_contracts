// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: contract/contracts.proto

package contractsV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContractsService_CreateContract_FullMethodName = "/contracts.v1.ContractsService/CreateContract"
	ContractsService_UpdateContract_FullMethodName = "/contracts.v1.ContractsService/UpdateContract"
	ContractsService_GetContract_FullMethodName    = "/contracts.v1.ContractsService/GetContract"
)

// ContractsServiceClient is the client API for ContractsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContractsServiceClient interface {
	CreateContract(ctx context.Context, in *CreateContractRequest, opts ...grpc.CallOption) (*ContractOperationResponse, error)
	UpdateContract(ctx context.Context, in *UpdateContractRequest, opts ...grpc.CallOption) (*ContractOperationResponse, error)
	GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*GetContractResponse, error)
}

type contractsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContractsServiceClient(cc grpc.ClientConnInterface) ContractsServiceClient {
	return &contractsServiceClient{cc}
}

func (c *contractsServiceClient) CreateContract(ctx context.Context, in *CreateContractRequest, opts ...grpc.CallOption) (*ContractOperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContractOperationResponse)
	err := c.cc.Invoke(ctx, ContractsService_CreateContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractsServiceClient) UpdateContract(ctx context.Context, in *UpdateContractRequest, opts ...grpc.CallOption) (*ContractOperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContractOperationResponse)
	err := c.cc.Invoke(ctx, ContractsService_UpdateContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractsServiceClient) GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*GetContractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContractResponse)
	err := c.cc.Invoke(ctx, ContractsService_GetContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContractsServiceServer is the server API for ContractsService service.
// All implementations must embed UnimplementedContractsServiceServer
// for forward compatibility.
type ContractsServiceServer interface {
	CreateContract(context.Context, *CreateContractRequest) (*ContractOperationResponse, error)
	UpdateContract(context.Context, *UpdateContractRequest) (*ContractOperationResponse, error)
	GetContract(context.Context, *GetContractRequest) (*GetContractResponse, error)
	mustEmbedUnimplementedContractsServiceServer()
}

// UnimplementedContractsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContractsServiceServer struct{}

func (UnimplementedContractsServiceServer) CreateContract(context.Context, *CreateContractRequest) (*ContractOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContract not implemented")
}
func (UnimplementedContractsServiceServer) UpdateContract(context.Context, *UpdateContractRequest) (*ContractOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContract not implemented")
}
func (UnimplementedContractsServiceServer) GetContract(context.Context, *GetContractRequest) (*GetContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContract not implemented")
}
func (UnimplementedContractsServiceServer) mustEmbedUnimplementedContractsServiceServer() {}
func (UnimplementedContractsServiceServer) testEmbeddedByValue()                          {}

// UnsafeContractsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContractsServiceServer will
// result in compilation errors.
type UnsafeContractsServiceServer interface {
	mustEmbedUnimplementedContractsServiceServer()
}

func RegisterContractsServiceServer(s grpc.ServiceRegistrar, srv ContractsServiceServer) {
	// If the following call pancis, it indicates UnimplementedContractsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContractsService_ServiceDesc, srv)
}

func _ContractsService_CreateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractsServiceServer).CreateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractsService_CreateContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractsServiceServer).CreateContract(ctx, req.(*CreateContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractsService_UpdateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractsServiceServer).UpdateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractsService_UpdateContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractsServiceServer).UpdateContract(ctx, req.(*UpdateContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractsService_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractsServiceServer).GetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContractsService_GetContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractsServiceServer).GetContract(ctx, req.(*GetContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContractsService_ServiceDesc is the grpc.ServiceDesc for ContractsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContractsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contracts.v1.ContractsService",
	HandlerType: (*ContractsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContract",
			Handler:    _ContractsService_CreateContract_Handler,
		},
		{
			MethodName: "UpdateContract",
			Handler:    _ContractsService_UpdateContract_Handler,
		},
		{
			MethodName: "GetContract",
			Handler:    _ContractsService_GetContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract/contracts.proto",
}
